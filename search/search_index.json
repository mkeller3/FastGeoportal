{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"QwikGeo Tech Docs \uf0c1 Under construction","title":"QwikGeo Tech Docs"},{"location":"#qwikgeo-tech-docs","text":"Under construction","title":"QwikGeo Tech Docs"},{"location":"analysis/","text":"Analysis Endpoints \uf0c1 Method URL Description GET /api/v1/analysis/status/{process_id} Analysis Status POST /api/v1/analysis/buffer Buffer POST /api/v1/analysis/dissolve Dissolve POST /api/v1/analysis/dissolve_by_value Dissolve By Value POST /api/v1/analysis/square_grids Square Grids POST /api/v1/analysis/hexagon_grids Hexagon Grids POST /api/v1/analysis/bounding_box Bounding Box POST /api/v1/analysis/k_means_cluster K Means Cluster POST /api/v1/analysis/center_of_each_polygon Center Of Each Polygon POST /api/v1/analysis/center_of_dataset Center Of Dataset POST /api/v1/analysis/find_within_distance Find Within Distance POST /api/v1/analysis/convex_hull Convex Hull POST /api/v1/analysis/aggregate_points_by_grids Aggregate Points By Grid POST /api/v1/analysis/aggregate_points_by_polygons Aggregate Points By Polygons POST /api/v1/analysis/select_inside Select Inside POST /api/v1/analysis/select_outside Select Outside POST /api/v1/analysis/clip Clip Endpoint Description's \uf0c1 Analysis Status \uf0c1 Any time an analysis is submitted it given a process_id to have the analysis run in the background using FastAPI's Background Tasks . To check the status of an analysis, you can call this endpoint with the process_id. Example Call \uf0c1 /api/v1/analysis/status/472e29dc-91a8-41d3-b05f-cee34006e3f7 Example Output - Still Running \uf0c1 { \"status\": \"PENDING\" } Example Output - Complete \uf0c1 { \"status\": \"SUCCESS\", \"new_table_id\": \"shnxppipxrppsdkozuroilkubktfodibtqorhucjvxlcdrqyhh\", \"completion_time\": \"2022-07-06T19:33:17.950059\", \"run_time_in_seconds\": 1.78599 } Example Output - Error \uf0c1 { \"status\": \"FAILURE\", \"error\": \"ERROR HERE\", \"completion_time\": \"2022-07-08T13:39:47.961389\", \"run_time_in_seconds\": 0.040892 } Buffer \uf0c1 Description \uf0c1 Buffer an geometric table with a buffer in kilometers. Example: Buffer zip centroids by one kilometer. Example Input \uf0c1 { \"table\": \"zip_centroids\", \"database\": \"data\", \"distance_in_kilometers\": 1 } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Dissolve \uf0c1 Description \uf0c1 Dissolve any geometric table into one single geometry. Example: Dissolve all the US States into one single geometry. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Dissolve By Value \uf0c1 Description \uf0c1 Dissolve any geometric table into geometries based off a column in the table. Example: Dissolve US States based off a column in the table called sub_region . Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\", \"column\": \"sub_region\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Square Grids \uf0c1 Description \uf0c1 Generate square grids of any size based off of a tables geometry. Example: Generate 100 kilometers square grids based off of a table containing US States. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\", \"grid_size_in_kilometers\": \"100\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Hexagon Grids \uf0c1 Description \uf0c1 Generate hexagon grids of any size based off of a tables geometry. Example: Generate 100 kilometers hexagon grids based off of a table containing US States. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\", \"grid_size_in_kilometers\": 100 } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Bounding Box \uf0c1 Description \uf0c1 Generate a bounding box of a table. Example: Find the bounding box of a table that contains all of the US States. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\", } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } K Means Cluster \uf0c1 Example: Group all US zip centroids into 5 groups based off of k means clusters. Description \uf0c1 Use K Means Clustering to group points based on their location. Example Input \uf0c1 { \"table\": \"zip_centroids\", \"database\": \"data\", \"number_of_clusters\": 5 } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Center Of Each Polygon \uf0c1 Description \uf0c1 Find the center of each polygon for a given table. Example: Find the center of each US State. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Center Of Dataset \uf0c1 Description \uf0c1 Find the center of all geometries based off a given table. Example: Find the geomeric center of a table that contains all of the US States. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Find Within Distance \uf0c1 Description \uf0c1 Find all geometries within a given distance from a given point. Example: Find all states within 500 kilometers of latitude 40.45 and latitude -88.95 . Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\", \"latitude\": 40.45, \"longitude\": -88.95, \"distance_in_kilometers\": 500 } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Convex Hull \uf0c1 Description \uf0c1 Find the smallest convex hull around a given table. Example: Find the smallest convex hull around all the US States. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Aggregate Points By Grid \uf0c1 Description \uf0c1 Aggregate a table of points into grids and determine how points are in each grid. Example: Determine how many zip centroids are each 1000 kilometer hexagon grid. Example Input \uf0c1 { \"table\": \"zip_centroids\", \"database\": \"data\", \"distance_in_kilometers\": 1000, \"grid_type\": \"hexagon\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Aggregate Points By Polygons \uf0c1 Description \uf0c1 Aggregate a table of points into a table of polygons and determine how points are in each polygon. Example: Determine how many zip centroids are within each US State. Example Input \uf0c1 { \"table\": \"zip_centroids\", \"database\": \"data\", \"polygons\": \"states\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Select Inside \uf0c1 Description \uf0c1 Find all geometries within a given polygon table. Example: Find all zip centroids within the US States table. Example Input \uf0c1 { \"table\": \"zip_centroids\", \"database\": \"data\", \"polygons\": \"states\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Select Outside \uf0c1 Description \uf0c1 Find all geomtries outside a given polygon table. Example: Find all the zip centroids outside of the table with US States. Example Input \uf0c1 { \"table\": \"zip_centroids\", \"database\": \"data\", \"polygons\": \"states\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Clip \uf0c1 Description \uf0c1 Clip any geometric table based of a polygon table. Example: Clip the US States table to a large polygon. Example Input \uf0c1 { \"table\": \"states\", \"database\": \"data\", \"polygons\": \"big_polygon\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Analysis Endpoints"},{"location":"analysis/#analysis-endpoints","text":"Method URL Description GET /api/v1/analysis/status/{process_id} Analysis Status POST /api/v1/analysis/buffer Buffer POST /api/v1/analysis/dissolve Dissolve POST /api/v1/analysis/dissolve_by_value Dissolve By Value POST /api/v1/analysis/square_grids Square Grids POST /api/v1/analysis/hexagon_grids Hexagon Grids POST /api/v1/analysis/bounding_box Bounding Box POST /api/v1/analysis/k_means_cluster K Means Cluster POST /api/v1/analysis/center_of_each_polygon Center Of Each Polygon POST /api/v1/analysis/center_of_dataset Center Of Dataset POST /api/v1/analysis/find_within_distance Find Within Distance POST /api/v1/analysis/convex_hull Convex Hull POST /api/v1/analysis/aggregate_points_by_grids Aggregate Points By Grid POST /api/v1/analysis/aggregate_points_by_polygons Aggregate Points By Polygons POST /api/v1/analysis/select_inside Select Inside POST /api/v1/analysis/select_outside Select Outside POST /api/v1/analysis/clip Clip","title":"Analysis Endpoints"},{"location":"analysis/#endpoint-descriptions","text":"","title":"Endpoint Description's"},{"location":"analysis/#analysis-status","text":"Any time an analysis is submitted it given a process_id to have the analysis run in the background using FastAPI's Background Tasks . To check the status of an analysis, you can call this endpoint with the process_id.","title":"Analysis Status"},{"location":"analysis/#example-call","text":"/api/v1/analysis/status/472e29dc-91a8-41d3-b05f-cee34006e3f7","title":"Example Call"},{"location":"analysis/#example-output-still-running","text":"{ \"status\": \"PENDING\" }","title":"Example Output - Still Running"},{"location":"analysis/#example-output-complete","text":"{ \"status\": \"SUCCESS\", \"new_table_id\": \"shnxppipxrppsdkozuroilkubktfodibtqorhucjvxlcdrqyhh\", \"completion_time\": \"2022-07-06T19:33:17.950059\", \"run_time_in_seconds\": 1.78599 }","title":"Example Output - Complete"},{"location":"analysis/#example-output-error","text":"{ \"status\": \"FAILURE\", \"error\": \"ERROR HERE\", \"completion_time\": \"2022-07-08T13:39:47.961389\", \"run_time_in_seconds\": 0.040892 }","title":"Example Output - Error"},{"location":"analysis/#buffer","text":"","title":"Buffer"},{"location":"analysis/#description","text":"Buffer an geometric table with a buffer in kilometers. Example: Buffer zip centroids by one kilometer.","title":"Description"},{"location":"analysis/#example-input","text":"{ \"table\": \"zip_centroids\", \"database\": \"data\", \"distance_in_kilometers\": 1 }","title":"Example Input"},{"location":"analysis/#example-output","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#dissolve","text":"","title":"Dissolve"},{"location":"analysis/#description_1","text":"Dissolve any geometric table into one single geometry. Example: Dissolve all the US States into one single geometry.","title":"Description"},{"location":"analysis/#example-input_1","text":"{ \"table\": \"states\", \"database\": \"data\" }","title":"Example Input"},{"location":"analysis/#example-output_1","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#dissolve-by-value","text":"","title":"Dissolve By Value"},{"location":"analysis/#description_2","text":"Dissolve any geometric table into geometries based off a column in the table. Example: Dissolve US States based off a column in the table called sub_region .","title":"Description"},{"location":"analysis/#example-input_2","text":"{ \"table\": \"states\", \"database\": \"data\", \"column\": \"sub_region\" }","title":"Example Input"},{"location":"analysis/#example-output_2","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#square-grids","text":"","title":"Square Grids"},{"location":"analysis/#description_3","text":"Generate square grids of any size based off of a tables geometry. Example: Generate 100 kilometers square grids based off of a table containing US States.","title":"Description"},{"location":"analysis/#example-input_3","text":"{ \"table\": \"states\", \"database\": \"data\", \"grid_size_in_kilometers\": \"100\" }","title":"Example Input"},{"location":"analysis/#example-output_3","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#hexagon-grids","text":"","title":"Hexagon Grids"},{"location":"analysis/#description_4","text":"Generate hexagon grids of any size based off of a tables geometry. Example: Generate 100 kilometers hexagon grids based off of a table containing US States.","title":"Description"},{"location":"analysis/#example-input_4","text":"{ \"table\": \"states\", \"database\": \"data\", \"grid_size_in_kilometers\": 100 }","title":"Example Input"},{"location":"analysis/#example-output_4","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#bounding-box","text":"","title":"Bounding Box"},{"location":"analysis/#description_5","text":"Generate a bounding box of a table. Example: Find the bounding box of a table that contains all of the US States.","title":"Description"},{"location":"analysis/#example-input_5","text":"{ \"table\": \"states\", \"database\": \"data\", }","title":"Example Input"},{"location":"analysis/#example-output_5","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#k-means-cluster","text":"Example: Group all US zip centroids into 5 groups based off of k means clusters.","title":"K Means Cluster"},{"location":"analysis/#description_6","text":"Use K Means Clustering to group points based on their location.","title":"Description"},{"location":"analysis/#example-input_6","text":"{ \"table\": \"zip_centroids\", \"database\": \"data\", \"number_of_clusters\": 5 }","title":"Example Input"},{"location":"analysis/#example-output_6","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#center-of-each-polygon","text":"","title":"Center Of Each Polygon"},{"location":"analysis/#description_7","text":"Find the center of each polygon for a given table. Example: Find the center of each US State.","title":"Description"},{"location":"analysis/#example-input_7","text":"{ \"table\": \"states\", \"database\": \"data\" }","title":"Example Input"},{"location":"analysis/#example-output_7","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#center-of-dataset","text":"","title":"Center Of Dataset"},{"location":"analysis/#description_8","text":"Find the center of all geometries based off a given table. Example: Find the geomeric center of a table that contains all of the US States.","title":"Description"},{"location":"analysis/#example-input_8","text":"{ \"table\": \"states\", \"database\": \"data\" }","title":"Example Input"},{"location":"analysis/#example-output_8","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#find-within-distance","text":"","title":"Find Within Distance"},{"location":"analysis/#description_9","text":"Find all geometries within a given distance from a given point. Example: Find all states within 500 kilometers of latitude 40.45 and latitude -88.95 .","title":"Description"},{"location":"analysis/#example-input_9","text":"{ \"table\": \"states\", \"database\": \"data\", \"latitude\": 40.45, \"longitude\": -88.95, \"distance_in_kilometers\": 500 }","title":"Example Input"},{"location":"analysis/#example-output_9","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#convex-hull","text":"","title":"Convex Hull"},{"location":"analysis/#description_10","text":"Find the smallest convex hull around a given table. Example: Find the smallest convex hull around all the US States.","title":"Description"},{"location":"analysis/#example-input_10","text":"{ \"table\": \"states\", \"database\": \"data\" }","title":"Example Input"},{"location":"analysis/#example-output_10","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#aggregate-points-by-grid","text":"","title":"Aggregate Points By Grid"},{"location":"analysis/#description_11","text":"Aggregate a table of points into grids and determine how points are in each grid. Example: Determine how many zip centroids are each 1000 kilometer hexagon grid.","title":"Description"},{"location":"analysis/#example-input_11","text":"{ \"table\": \"zip_centroids\", \"database\": \"data\", \"distance_in_kilometers\": 1000, \"grid_type\": \"hexagon\" }","title":"Example Input"},{"location":"analysis/#example-output_11","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#aggregate-points-by-polygons","text":"","title":"Aggregate Points By Polygons"},{"location":"analysis/#description_12","text":"Aggregate a table of points into a table of polygons and determine how points are in each polygon. Example: Determine how many zip centroids are within each US State.","title":"Description"},{"location":"analysis/#example-input_12","text":"{ \"table\": \"zip_centroids\", \"database\": \"data\", \"polygons\": \"states\" }","title":"Example Input"},{"location":"analysis/#example-output_12","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#select-inside","text":"","title":"Select Inside"},{"location":"analysis/#description_13","text":"Find all geometries within a given polygon table. Example: Find all zip centroids within the US States table.","title":"Description"},{"location":"analysis/#example-input_13","text":"{ \"table\": \"zip_centroids\", \"database\": \"data\", \"polygons\": \"states\" }","title":"Example Input"},{"location":"analysis/#example-output_13","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#select-outside","text":"","title":"Select Outside"},{"location":"analysis/#description_14","text":"Find all geomtries outside a given polygon table. Example: Find all the zip centroids outside of the table with US States.","title":"Description"},{"location":"analysis/#example-input_14","text":"{ \"table\": \"zip_centroids\", \"database\": \"data\", \"polygons\": \"states\" }","title":"Example Input"},{"location":"analysis/#example-output_14","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"analysis/#clip","text":"","title":"Clip"},{"location":"analysis/#description_15","text":"Clip any geometric table based of a polygon table. Example: Clip the US States table to a large polygon.","title":"Description"},{"location":"analysis/#example-input_15","text":"{ \"table\": \"states\", \"database\": \"data\", \"polygons\": \"big_polygon\" }","title":"Example Input"},{"location":"analysis/#example-output_15","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/analysis/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"authentication/","text":"Authentication Endpoints \uf0c1 Method URL Description POST /api/v1/authentication/token Token POST /api/v1/authentication/user Create User PUT /api/v1/authentication/user Update User GET /api/v1/authentication/user View User Endpoint Description's \uf0c1 Token \uf0c1 Description \uf0c1 The token endpoint allows you to recieve a JWT token to authenticate with the API. Example Input \uf0c1 { \"username\": \"mrider3\", \"password\": \"secret\" } Example Output \uf0c1 { \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6M30.PJZEu9eDOBqSQTWJkNMCdV__tvuETyEVRwA5wH9Ansc\", \"token_type\": \"bearer\" } Create User \uf0c1 Description \uf0c1 The create user endpoint allows you to create a new user to use the application. Example Input \uf0c1 { \"username\": \"mrider3\", \"password_hash\": \"secret\" } Example Output \uf0c1 { \"id\": 1, \"username\": \"mrider3\", \"password_hash\": \"$2b$12$/mV9SXGaslPAgjM7CBnDLuFLiwwKfy7Liz715lXewHlod0KKlp.Wu\", \"name\": null, \"created_at\": \"2022-08-19T18:44:55.415824+00:00\", \"modified_at\": \"2022-08-19T18:44:55.415846+00:00\" } Update User \uf0c1 Description \uf0c1 The update user endpoint allows you to update information about your account. Example Input \uf0c1 { \"username\": \"mrider3\", \"password_hash\": \"secret\", \"name\": \"Michael\" } Example Output \uf0c1 { \"id\": 1, \"username\": \"mrider3\", \"password_hash\": \"secret\", \"name\": \"Michael\", \"created_at\": \"2022-08-19T18:20:13.662074+00:00\", \"modified_at\": \"2022-08-19T18:20:13.662074+00:00\" } Delete User \uf0c1 Description \uf0c1 The delete user endpoint allows you to delete your account. Example Output \uf0c1 { \"message\": \"Deleted user 1\" }","title":"Authentication Endpoints"},{"location":"authentication/#authentication-endpoints","text":"Method URL Description POST /api/v1/authentication/token Token POST /api/v1/authentication/user Create User PUT /api/v1/authentication/user Update User GET /api/v1/authentication/user View User","title":"Authentication Endpoints"},{"location":"authentication/#endpoint-descriptions","text":"","title":"Endpoint Description's"},{"location":"authentication/#token","text":"","title":"Token"},{"location":"authentication/#description","text":"The token endpoint allows you to recieve a JWT token to authenticate with the API.","title":"Description"},{"location":"authentication/#example-input","text":"{ \"username\": \"mrider3\", \"password\": \"secret\" }","title":"Example Input"},{"location":"authentication/#example-output","text":"{ \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6M30.PJZEu9eDOBqSQTWJkNMCdV__tvuETyEVRwA5wH9Ansc\", \"token_type\": \"bearer\" }","title":"Example Output"},{"location":"authentication/#create-user","text":"","title":"Create User"},{"location":"authentication/#description_1","text":"The create user endpoint allows you to create a new user to use the application.","title":"Description"},{"location":"authentication/#example-input_1","text":"{ \"username\": \"mrider3\", \"password_hash\": \"secret\" }","title":"Example Input"},{"location":"authentication/#example-output_1","text":"{ \"id\": 1, \"username\": \"mrider3\", \"password_hash\": \"$2b$12$/mV9SXGaslPAgjM7CBnDLuFLiwwKfy7Liz715lXewHlod0KKlp.Wu\", \"name\": null, \"created_at\": \"2022-08-19T18:44:55.415824+00:00\", \"modified_at\": \"2022-08-19T18:44:55.415846+00:00\" }","title":"Example Output"},{"location":"authentication/#update-user","text":"","title":"Update User"},{"location":"authentication/#description_2","text":"The update user endpoint allows you to update information about your account.","title":"Description"},{"location":"authentication/#example-input_2","text":"{ \"username\": \"mrider3\", \"password_hash\": \"secret\", \"name\": \"Michael\" }","title":"Example Input"},{"location":"authentication/#example-output_2","text":"{ \"id\": 1, \"username\": \"mrider3\", \"password_hash\": \"secret\", \"name\": \"Michael\", \"created_at\": \"2022-08-19T18:20:13.662074+00:00\", \"modified_at\": \"2022-08-19T18:20:13.662074+00:00\" }","title":"Example Output"},{"location":"authentication/#delete-user","text":"","title":"Delete User"},{"location":"authentication/#description_3","text":"The delete user endpoint allows you to delete your account.","title":"Description"},{"location":"authentication/#example-output_3","text":"{ \"message\": \"Deleted user 1\" }","title":"Example Output"},{"location":"collections/","text":"Collections Endpoints \uf0c1 Method URL Description GET /api/v1/collections Collections GET /api/v1/collections/{name} Feature Collection GET /api/v1/collections/{name}/items Features GET /api/v1/collections/{name}/items/{id} Feature Endpoint Description's \uf0c1 Collections \uf0c1 Collection endpoint returns a list of all available tables to query. Collections endpoint is available at /api/v1/collections curl http://localhost:8000/api/v1/collections Example Response [ { \"id\": \"data.public.zip_centroids\", \"title\": \"zip_centroids\", \"description\": \"zip_centroids\", \"keywords\": [ \"zip_centroids\" ], \"links\": [ { \"type\": \"application/json\", \"rel\": \"self\", \"title\": \"This document as JSON\", \"href\": \"http://127.0.0.1:8000/api/v1/collections/data.public.zip_centroids\" } ], \"extent\": { \"spatial\": { \"bbox\": [ -180, -90, 180, 90 ], \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\" } }, \"itemType\": \"feature\" }, {},... Feature Collection \uf0c1 Feature Collection endpoint returns information about a single table. Collections endpoint is available at /api/v1/collections/{item} curl http://localhost:8000/api/v1/collections/data.public.zip_centroids Example Response { \"id\": \"data.public.zip_centroids\", \"title\": \"data.public.zip_centroids\", \"description\": \"data.public.zip_centroids\", \"keywords\": [ \"data.public.zip_centroids\" ], \"links\": [ { \"type\": \"application/json\", \"rel\": \"self\", \"title\": \"Items as GeoJSON\", \"href\": \"http://127.0.0.1:8000/api/v1/collections/data.public.zip_centroids/items\" } ], \"extent\": { \"spatial\": { \"bbox\": [ -180, -90, 180, 90 ], \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\" } }, \"itemType\": \"feature\" } Features \uf0c1 Features endpoint returns a geojson feature collection for a feature collection. Collections endpoint is available at /api/v1/collections/{item}/items curl http://localhost:8000/api/v1/collections/data.public.states/items Parameters \uf0c1 bbox=mix,miny,maxx,maxy - filter features in response to ones intersecting a bounding box (in lon/lat or specified CRS). Ex. 17,-48,69,-161 <propname>=val - filter features for a property having a value. Multiple property filters are ANDed together. filter=cql-expr - filters features via a CQL expression. properties=PROP-LIST - return only specific properties (comma-separated). If PROP-LIST is empty, no properties are returned. If not present, all properties are returned.dinates to use N decimal places sortby=PROP[A|D] - sort the response items by a property (ascending (default) or descending). limit=N - limits the number of features in the response. offset=N - starts the response at an offset. srid=srid_number - The srid number for data. Default is 4326. Example Response { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ ... ] }, \"properties\": { \"gid\": 5, \"state_name\": \"Nevada\", \"state_fips\": \"32\", \"sub_region\": \"Mountain\", \"state_abbr\": \"NV\", \"population\": 2994047 } }, ... ] } Feature \uf0c1 Feature endpoint returns a geojson feature collection for a single feature in a feature collection. Collections endpoint is available at /api/v1/collections/{item}/items/{id} curl http://localhost:8000/api/v1/collections/data.public.states/items/5 Parameters \uf0c1 properties=PROP-LIST - return only specific properties (comma-separated). If PROP-LIST is empty, no properties are returned. If not present, all properties are returned. Example Response { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ ... ] }, \"properties\": { \"gid\": 5, \"state_name\": \"Nevada\", \"state_fips\": \"32\", \"sub_region\": \"Mountain\", \"state_abbr\": \"NV\", \"population\": 2994047 } } ] }","title":"Collections Endpoints"},{"location":"collections/#collections-endpoints","text":"Method URL Description GET /api/v1/collections Collections GET /api/v1/collections/{name} Feature Collection GET /api/v1/collections/{name}/items Features GET /api/v1/collections/{name}/items/{id} Feature","title":"Collections Endpoints"},{"location":"collections/#endpoint-descriptions","text":"","title":"Endpoint Description's"},{"location":"collections/#collections","text":"Collection endpoint returns a list of all available tables to query. Collections endpoint is available at /api/v1/collections curl http://localhost:8000/api/v1/collections Example Response [ { \"id\": \"data.public.zip_centroids\", \"title\": \"zip_centroids\", \"description\": \"zip_centroids\", \"keywords\": [ \"zip_centroids\" ], \"links\": [ { \"type\": \"application/json\", \"rel\": \"self\", \"title\": \"This document as JSON\", \"href\": \"http://127.0.0.1:8000/api/v1/collections/data.public.zip_centroids\" } ], \"extent\": { \"spatial\": { \"bbox\": [ -180, -90, 180, 90 ], \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\" } }, \"itemType\": \"feature\" }, {},...","title":"Collections"},{"location":"collections/#feature-collection","text":"Feature Collection endpoint returns information about a single table. Collections endpoint is available at /api/v1/collections/{item} curl http://localhost:8000/api/v1/collections/data.public.zip_centroids Example Response { \"id\": \"data.public.zip_centroids\", \"title\": \"data.public.zip_centroids\", \"description\": \"data.public.zip_centroids\", \"keywords\": [ \"data.public.zip_centroids\" ], \"links\": [ { \"type\": \"application/json\", \"rel\": \"self\", \"title\": \"Items as GeoJSON\", \"href\": \"http://127.0.0.1:8000/api/v1/collections/data.public.zip_centroids/items\" } ], \"extent\": { \"spatial\": { \"bbox\": [ -180, -90, 180, 90 ], \"crs\": \"http://www.opengis.net/def/crs/OGC/1.3/CRS84\" } }, \"itemType\": \"feature\" }","title":"Feature Collection"},{"location":"collections/#features","text":"Features endpoint returns a geojson feature collection for a feature collection. Collections endpoint is available at /api/v1/collections/{item}/items curl http://localhost:8000/api/v1/collections/data.public.states/items","title":"Features"},{"location":"collections/#parameters","text":"bbox=mix,miny,maxx,maxy - filter features in response to ones intersecting a bounding box (in lon/lat or specified CRS). Ex. 17,-48,69,-161 <propname>=val - filter features for a property having a value. Multiple property filters are ANDed together. filter=cql-expr - filters features via a CQL expression. properties=PROP-LIST - return only specific properties (comma-separated). If PROP-LIST is empty, no properties are returned. If not present, all properties are returned.dinates to use N decimal places sortby=PROP[A|D] - sort the response items by a property (ascending (default) or descending). limit=N - limits the number of features in the response. offset=N - starts the response at an offset. srid=srid_number - The srid number for data. Default is 4326. Example Response { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ ... ] }, \"properties\": { \"gid\": 5, \"state_name\": \"Nevada\", \"state_fips\": \"32\", \"sub_region\": \"Mountain\", \"state_abbr\": \"NV\", \"population\": 2994047 } }, ... ] }","title":"Parameters"},{"location":"collections/#feature","text":"Feature endpoint returns a geojson feature collection for a single feature in a feature collection. Collections endpoint is available at /api/v1/collections/{item}/items/{id} curl http://localhost:8000/api/v1/collections/data.public.states/items/5","title":"Feature"},{"location":"collections/#parameters_1","text":"properties=PROP-LIST - return only specific properties (comma-separated). If PROP-LIST is empty, no properties are returned. If not present, all properties are returned. Example Response { \"type\": \"FeatureCollection\", \"features\": [ { \"type\": \"Feature\", \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ ... ] }, \"properties\": { \"gid\": 5, \"state_name\": \"Nevada\", \"state_fips\": \"32\", \"sub_region\": \"Mountain\", \"state_abbr\": \"NV\", \"population\": 2994047 } } ] }","title":"Parameters"},{"location":"getting-started/","text":"","title":"Index"},{"location":"imports/","text":"Imports Endpoints \uf0c1 Method URL Description GET /api/v1/imports/status/{process_id} Import Status POST /api/v1/imports/arcgis_service ArcGIS Service POST /api/v1/imports/geographic_data_from_geographic_file Geographic Data From Geographic File POST /api/v1/imports/geographic_data_from_csv Geographic Data From CSV POST /api/v1/imports/point_data_from_csv Point Data From CSV POST /api/v1/imports/geographic_data_from_json_file Geographic Data From Json File POST /api/v1/imports/point_data_from_json_file Point Data From Json File POST /api/v1/imports/geographic_data_from_json_url Geographic Data From Json URL POST /api/v1/imports/point_data_from_json_url Point Data From Json URL POST /api/v1/imports/geojson_from_url Geojson From URL Endpoint Description's \uf0c1 Import Status \uf0c1 Any time an import is submitted it given a process_id to have the import run in the background using FastAPI's Background Tasks . To check the status of an import, you can call this endpoint with the process_id. Example Call \uf0c1 /api/v1/imports/status/472e29dc-91a8-41d3-b05f-cee34006e3f7 Example Output - Still Running \uf0c1 { \"status\": \"PENDING\" } Example Output - Complete \uf0c1 { \"status\": \"SUCCESS\", \"new_table_id\": \"shnxppipxrppsdkozuroilkubktfodibtqorhucjvxlcdrqyhh\", \"completion_time\": \"2022-07-06T19:33:17.950059\", \"run_time_in_seconds\": 1.78599 } Example Output - Error \uf0c1 { \"status\": \"FAILURE\", \"error\": \"ERROR HERE\", \"completion_time\": \"2022-07-08T13:39:47.961389\", \"run_time_in_seconds\": 0.040892 } ArcGIS Service \uf0c1 Description \uf0c1 Import data from any FeatureServer or MapServer that allows for geojson as an output. Example: Download a point dataset of Tennesse State Parks. Example Input \uf0c1 { \"url\": \"https://services5.arcgis.com/bPacKTm9cauMXVfn/ArcGIS/rest/services/TN_State_Parks_Points/FeatureServer/0\", \"database\": \"data\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Geographic Data From Geographic File \uf0c1 Description \uf0c1 Import geographic data from a file/files. Example: Import geojson from file . Example Input \uf0c1 { \"database\": \"data\", \"files\": \"FILES IN MULTI PART FORM\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Geographic Data From CSV \uf0c1 Description \uf0c1 Import a csv file and join to a map already within the database based off a column. Example: Uploading a csv with two columns state_abbr and Number of Rest Stops and joining to the states map based off of the state_abbr column. Example Input \uf0c1 { \"database\": \"data\", \"map\": \"states\", \"map_column\": \"state_abbr\", \"map_columns\": [\"state_abbr\"], \"table_column\": \"state_abbr\", \"table_columns\": [\"state_abbr\",\"Number of Rest Stops\"], \"files\": \"FILES IN MULTI PART FORM\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Point Data From CSV \uf0c1 Description \uf0c1 Import a csv file with latitude and longitude columns into database. Example: A csv file with latitude and longitude columns for US Capitals. Example Input \uf0c1 { \"database\": \"data\", \"longitude\": \"longitude\", \"latitude\": \"latitude\", \"table_columns\": [\"name\",\"description\",\"latitude\",\"longitude\"], \"files\": \"FILES IN MULTI PART FORM\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Geographic Data From Json File \uf0c1 Description \uf0c1 Import json from a file and join to a map already within the database based off a column. Example: Import state date from a json file . Example Input \uf0c1 { \"database\": \"data\", \"map\": \"states\", \"map_column\": \"state_abbr\", \"map_columns\": [\"state_abbr\"], \"table_column\": \"code\", \"table_columns\": [\"state\",\"slug\",\"code\",\"nickname\"], \"files\": \"FILES IN MULTI PART FORM\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Point Data From Json File \uf0c1 Description \uf0c1 Import point data from a Json file with latitude and longitude columns. Example: A json file that contains cities for the entire world. Example Input \uf0c1 { \"database\": \"data\", \"longitude\": \"longitude\", \"latitude\": \"latitude\", \"table_columns\": [\"id\",\"name\",\"latitude\",\"longitude\",\"state_id\",\"state_code\",\"state_name\",\"country_id\",\"country_code\",\"country_name\",\"wikiDataId\"], \"files\": \"FILES IN MULTI PART FORM\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Geographic Data From Json URL \uf0c1 Description \uf0c1 Import json from a url and join to a map already within the database based off a column. Example: Import state information from a gitlab url Example Input \uf0c1 { \"database\": \"data\", \"map_column\": \"state_abbr\", \"table_column\": \"code\", \"table_columns\": [ \"state\", \"slug\", \"code\", \"nickname\" ], \"map\": \"states\", \"map_columns\": [ \"state_abbr\" ], \"url\": \"https://raw.githubusercontent.com/CivilServiceUSA/us-states/master/data/states.json\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Point Data From Json URL \uf0c1 Description \uf0c1 Import json data from a url with latitude and longitude columns into database. Example: Import state centroids from a gitlab url Example Input \uf0c1 { \"url\": \"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/states.json\", \"database\": \"data\", \"longitude\": \"longitude\", \"latitude\": \"latitude\", \"table_columns\": [\"id\",\"name\",\"latitude\",\"longitude\",\"state_code\",\"country_id\",\"country_code\",\"country_name\",\"type\"], \"files\": \"FILES IN MULTI PART FORM\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" } Geojson From URL \uf0c1 Description \uf0c1 Import geojson from any url. Example: Input large earthquakes for the past month Example Input \uf0c1 { \"database\": \"data\", \"url\": \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.geojson\" } Example Output \uf0c1 { \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Imports Endpoints"},{"location":"imports/#imports-endpoints","text":"Method URL Description GET /api/v1/imports/status/{process_id} Import Status POST /api/v1/imports/arcgis_service ArcGIS Service POST /api/v1/imports/geographic_data_from_geographic_file Geographic Data From Geographic File POST /api/v1/imports/geographic_data_from_csv Geographic Data From CSV POST /api/v1/imports/point_data_from_csv Point Data From CSV POST /api/v1/imports/geographic_data_from_json_file Geographic Data From Json File POST /api/v1/imports/point_data_from_json_file Point Data From Json File POST /api/v1/imports/geographic_data_from_json_url Geographic Data From Json URL POST /api/v1/imports/point_data_from_json_url Point Data From Json URL POST /api/v1/imports/geojson_from_url Geojson From URL","title":"Imports Endpoints"},{"location":"imports/#endpoint-descriptions","text":"","title":"Endpoint Description's"},{"location":"imports/#import-status","text":"Any time an import is submitted it given a process_id to have the import run in the background using FastAPI's Background Tasks . To check the status of an import, you can call this endpoint with the process_id.","title":"Import Status"},{"location":"imports/#example-call","text":"/api/v1/imports/status/472e29dc-91a8-41d3-b05f-cee34006e3f7","title":"Example Call"},{"location":"imports/#example-output-still-running","text":"{ \"status\": \"PENDING\" }","title":"Example Output - Still Running"},{"location":"imports/#example-output-complete","text":"{ \"status\": \"SUCCESS\", \"new_table_id\": \"shnxppipxrppsdkozuroilkubktfodibtqorhucjvxlcdrqyhh\", \"completion_time\": \"2022-07-06T19:33:17.950059\", \"run_time_in_seconds\": 1.78599 }","title":"Example Output - Complete"},{"location":"imports/#example-output-error","text":"{ \"status\": \"FAILURE\", \"error\": \"ERROR HERE\", \"completion_time\": \"2022-07-08T13:39:47.961389\", \"run_time_in_seconds\": 0.040892 }","title":"Example Output - Error"},{"location":"imports/#arcgis-service","text":"","title":"ArcGIS Service"},{"location":"imports/#description","text":"Import data from any FeatureServer or MapServer that allows for geojson as an output. Example: Download a point dataset of Tennesse State Parks.","title":"Description"},{"location":"imports/#example-input","text":"{ \"url\": \"https://services5.arcgis.com/bPacKTm9cauMXVfn/ArcGIS/rest/services/TN_State_Parks_Points/FeatureServer/0\", \"database\": \"data\" }","title":"Example Input"},{"location":"imports/#example-output","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#geographic-data-from-geographic-file","text":"","title":"Geographic Data From Geographic File"},{"location":"imports/#description_1","text":"Import geographic data from a file/files. Example: Import geojson from file .","title":"Description"},{"location":"imports/#example-input_1","text":"{ \"database\": \"data\", \"files\": \"FILES IN MULTI PART FORM\" }","title":"Example Input"},{"location":"imports/#example-output_1","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#geographic-data-from-csv","text":"","title":"Geographic Data From CSV"},{"location":"imports/#description_2","text":"Import a csv file and join to a map already within the database based off a column. Example: Uploading a csv with two columns state_abbr and Number of Rest Stops and joining to the states map based off of the state_abbr column.","title":"Description"},{"location":"imports/#example-input_2","text":"{ \"database\": \"data\", \"map\": \"states\", \"map_column\": \"state_abbr\", \"map_columns\": [\"state_abbr\"], \"table_column\": \"state_abbr\", \"table_columns\": [\"state_abbr\",\"Number of Rest Stops\"], \"files\": \"FILES IN MULTI PART FORM\" }","title":"Example Input"},{"location":"imports/#example-output_2","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#point-data-from-csv","text":"","title":"Point Data From CSV"},{"location":"imports/#description_3","text":"Import a csv file with latitude and longitude columns into database. Example: A csv file with latitude and longitude columns for US Capitals.","title":"Description"},{"location":"imports/#example-input_3","text":"{ \"database\": \"data\", \"longitude\": \"longitude\", \"latitude\": \"latitude\", \"table_columns\": [\"name\",\"description\",\"latitude\",\"longitude\"], \"files\": \"FILES IN MULTI PART FORM\" }","title":"Example Input"},{"location":"imports/#example-output_3","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#geographic-data-from-json-file","text":"","title":"Geographic Data From Json File"},{"location":"imports/#description_4","text":"Import json from a file and join to a map already within the database based off a column. Example: Import state date from a json file .","title":"Description"},{"location":"imports/#example-input_4","text":"{ \"database\": \"data\", \"map\": \"states\", \"map_column\": \"state_abbr\", \"map_columns\": [\"state_abbr\"], \"table_column\": \"code\", \"table_columns\": [\"state\",\"slug\",\"code\",\"nickname\"], \"files\": \"FILES IN MULTI PART FORM\" }","title":"Example Input"},{"location":"imports/#example-output_4","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#point-data-from-json-file","text":"","title":"Point Data From Json File"},{"location":"imports/#description_5","text":"Import point data from a Json file with latitude and longitude columns. Example: A json file that contains cities for the entire world.","title":"Description"},{"location":"imports/#example-input_5","text":"{ \"database\": \"data\", \"longitude\": \"longitude\", \"latitude\": \"latitude\", \"table_columns\": [\"id\",\"name\",\"latitude\",\"longitude\",\"state_id\",\"state_code\",\"state_name\",\"country_id\",\"country_code\",\"country_name\",\"wikiDataId\"], \"files\": \"FILES IN MULTI PART FORM\" }","title":"Example Input"},{"location":"imports/#example-output_5","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#geographic-data-from-json-url","text":"","title":"Geographic Data From Json URL"},{"location":"imports/#description_6","text":"Import json from a url and join to a map already within the database based off a column. Example: Import state information from a gitlab url","title":"Description"},{"location":"imports/#example-input_6","text":"{ \"database\": \"data\", \"map_column\": \"state_abbr\", \"table_column\": \"code\", \"table_columns\": [ \"state\", \"slug\", \"code\", \"nickname\" ], \"map\": \"states\", \"map_columns\": [ \"state_abbr\" ], \"url\": \"https://raw.githubusercontent.com/CivilServiceUSA/us-states/master/data/states.json\" }","title":"Example Input"},{"location":"imports/#example-output_6","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#point-data-from-json-url","text":"","title":"Point Data From Json URL"},{"location":"imports/#description_7","text":"Import json data from a url with latitude and longitude columns into database. Example: Import state centroids from a gitlab url","title":"Description"},{"location":"imports/#example-input_7","text":"{ \"url\": \"https://raw.githubusercontent.com/dr5hn/countries-states-cities-database/master/states.json\", \"database\": \"data\", \"longitude\": \"longitude\", \"latitude\": \"latitude\", \"table_columns\": [\"id\",\"name\",\"latitude\",\"longitude\",\"state_code\",\"country_id\",\"country_code\",\"country_name\",\"type\"], \"files\": \"FILES IN MULTI PART FORM\" }","title":"Example Input"},{"location":"imports/#example-output_7","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"imports/#geojson-from-url","text":"","title":"Geojson From URL"},{"location":"imports/#description_8","text":"Import geojson from any url. Example: Input large earthquakes for the past month","title":"Description"},{"location":"imports/#example-input_8","text":"{ \"database\": \"data\", \"url\": \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/significant_month.geojson\" }","title":"Example Input"},{"location":"imports/#example-output_8","text":"{ \"process_id\": \"c8d7b8d8-3e82-4f93-b441-55a5f51c4171\", \"url\": \"http://127.0.0.1:8000/api/v1/imports/status/c8d7b8d8-3e82-4f93-b441-55a5f51c4171\" }","title":"Example Output"},{"location":"services/","text":"","title":"Index"},{"location":"tables/","text":"Tables Endpoints \uf0c1 Method URL Description PUT /api/v1/tables/edit_row_attributes Edit Row Attributes PUT /api/v1/tables/edit_row_geometry Edit Row Geometry POST /api/v1/tables/add_column Add Column DELETE /api/v1/tables/delete_column Delete Column POST /api/v1/tables/add_row Add Row DELETE /api/v1/tables/delete_row Delete Row DELETE /api/v1/tables/delete_table Delete Table POST /api/v1/tables/create_table Create Table POST /api/v1/tables/statistics Statistics POST /api/v1/tables/bins Bins POST /api/v1/tables/numeric_breaks Numeric Breaks POST /api/v1/tables/custom_break_values Custom Break Values Endpoint Description's \uf0c1 Edit Row Attributes \uf0c1 Description \uf0c1 Edit Row Attributes endpoint allows you to edit one/all atrributes for a row at a time. In the example below we are changing the objectid and last_name columns for the row with a gid of 1 . Example: Example Input \uf0c1 { \"database\": \"data\", \"table\": \"mclean_county_parcels\", \"gid\": 1, \"values\": { \"objectid\": \"1\", \"last_name\": \"sample\" } } Example Output \uf0c1 { \"status\": true } Edit Row Geometry \uf0c1 Description \uf0c1 Edit Row Geometry endpoint allows you to change the geometry for each feature in a table by passing in geojson geometry in SRID 4326. In the example below, we are updating the table called zip_centroids with the gid of 1 for a new lat lng of [-88.23456,40.12345] . Example: Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"gid\": 1, \"geojson\": { \"type\": \"Point\", \"coordinates\": [ -88.23456, 40.12345 ] } } Example Output \uf0c1 { \"status\": true } Add Column \uf0c1 Description \uf0c1 The add column endpoints allows you to add a new column to an existing table in the database. Example: In the example below, we are adding a column called test that is text for the table zip_centroids . Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"column_name\": \"test\", \"column_type\": \"text\" } Example Output \uf0c1 { \"status\": true } Delete Column \uf0c1 Description \uf0c1 The delete column endpoint allows you to delete a column in an existing table in the database. Example: In the example below, we are deleting a column called test from the table zip_centroids . Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"column_name\": \"test\" } Example Output \uf0c1 { \"status\": true } Add Row \uf0c1 Description \uf0c1 The add row endpoint allows you to add a new to an existing table within the database. You can pass in one or all columns for this endpoint. If you do not pass in a column the value will be null. Example: In the example below, we are adding a a new row to the zip_centroids table and only adding the postalcode column with the geometry. Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"columns\": [ { \"column_name\": \"postalcode\", \"value\": \"55555\" } ], \"geojson\": { \"type\": \"Point\", \"coordinates\": [ -88.23456, 40.12345 ] } } Example Output \uf0c1 { \"status\": true, \"gid\": 7821 } Delete Row \uf0c1 Description \uf0c1 The delete row endpoint allows you to delete a row for a table that exists in the database. Example: In the example below, we are deleting the column with a gid of 1 in the table zip_centroids . Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"gid\": 1 } Example Output \uf0c1 { \"status\": true } Create Table \uf0c1 Description \uf0c1 The create table endpoints allow you to create a new table inside of a database. Example: In the example below, we are creating a new table called zip_centroids_new . We are adding one column in the table called postalcode , and setting the table to have POINT geometry. Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids_new\", \"columns\": [ { \"column_name\": \"postalcode\", \"column_type\": \"text\" } ], \"geometry_type\": \"POINT\" } Example Output \uf0c1 { \"status\": true } Delete Table \uf0c1 Description \uf0c1 The delete table endpoint allows you to delete a table within the database. Example: In the example below, we are deleting a table called zip_centroids . Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\" } Example Output \uf0c1 { \"status\": true } Statistics \uf0c1 Description \uf0c1 The statistics endpoints allows you to perform a multitude of common math statistics on your table such as 'distinct', 'avg', 'count', 'sum', 'max', 'min' . Parameters \uf0c1 coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: In the example below we will be searching for the number of parcels, average deed ac, and distinct first names filtered by last name of DOOLEY . Example Input \uf0c1 { \"database\": \"data\", \"table\": \"mclean_county_parcels\", \"aggregate_columns\": [ { \"type\": \"count\", \"column\": \"gid\" }, { \"type\": \"avg\", \"column\": \"deed_ac\" }, { \"type\": \"distinct\", \"column\": \"first_name\", \"group_column\": \"first_name\", \"group_method\": \"count\" } ], \"filter\": \"last_name LIKE '%DOOLEY%'\" } Example Output \uf0c1 { \"results\": { \"count_gid\": 19, \"avg_deed_ac\": 64.28666666666666, \"distinct_first_name_count_first_name\": [ { \"first_name\": \"\", \"count\": 3 }, { \"first_name\": \"COLE\", \"count\": 3 }, { \"first_name\": \"% BAS\", \"count\": 2 }, { \"first_name\": \"%FIRST MID AG SERVICES \", \"count\": 2 }, { \"first_name\": \"COLE & WENDY\", \"count\": 1 }, { \"first_name\": \"EDITH\", \"count\": 1 }, { \"first_name\": \"JAMES R & TERESA\", \"count\": 1 }, { \"first_name\": \"KENNETH\", \"count\": 1 }, { \"first_name\": \"KEVIN\", \"count\": 1 }, { \"first_name\": \"LUCAS\", \"count\": 1 }, { \"first_name\": \"MCCALLA O & DEANA J\", \"count\": 1 }, { \"first_name\": \"THOMAS\", \"count\": 1 }, { \"first_name\": \"WENDY\", \"count\": 1 } ] }, \"status\": \"SUCCESS\" } Bins \uf0c1 Description \uf0c1 The bins endpoints allows you to help visualize the spread of a data for a numerical column. Parameters \uf0c1 coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: Calculate 10 bins for the deed_ac column on the mclean_county_parcels table. Example Input \uf0c1 { \"database\": \"data\", \"table\": \"mclean_county_parcels\", \"column\": \"deed_ac\", \"bins\": 10 } Example Output \uf0c1 { \"results\": [ { \"min\": 0.0, \"max\": 145.158, \"count\": 15993 }, { \"min\": 145.158, \"max\": 290.316, \"count\": 1088 }, { \"min\": 290.316, \"max\": 435.47399999999993, \"count\": 116 }, { \"min\": 435.47399999999993, \"max\": 580.632, \"count\": 19 }, { \"min\": 580.632, \"max\": 725.79, \"count\": 11 }, { \"min\": 725.79, \"max\": 870.9479999999999, \"count\": 1 }, { \"min\": 870.9479999999999, \"max\": 1016.1059999999999, \"count\": 0 }, { \"min\": 1016.1059999999999, \"max\": 1161.264, \"count\": 0 }, { \"min\": 1161.264, \"max\": 1306.4219999999998, \"count\": 0 }, { \"min\": 1306.4219999999998, \"max\": 1451.58, \"count\": 1 } ], \"status\": \"SUCCESS\" } Numeric Breaks \uf0c1 Description \uf0c1 Create bins of data based off of different mathmatical break types. Break Types: equal_interval, head_tail, quantile, jenk . Parameters \uf0c1 coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: Create 3 breaks based off of the column population for the table zip_centroids using a quantile break type. Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"column\": \"population\", \"number_of_breaks\": 3, \"break_type\": \"quantile\" } Example Output \uf0c1 { \"results\": [ { \"min\": 0, \"max\": 1470, \"count\": 10301 }, { \"min\": 1470, \"max\": 8932, \"count\": 10373 }, { \"min\": 8932, \"max\": 133324, \"count\": 10377 } ], \"status\": \"SUCCESS\" } Custom Break Values \uf0c1 Description \uf0c1 Create bins based off of your own min and max ranges and provide a count back for each bin. Parameters \uf0c1 coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: Create 3 custom bins 0 - 1,000 , 1,000 - 9,000 , and 9,000 - 140,000 based off of the column population for the table zip_centroids using a quantile break type. Example Input \uf0c1 { \"database\": \"data\", \"table\": \"zip_centroids\", \"column\": \"population\", \"breaks\": [ { \"min\": 0, \"max\": 1000 }, { \"min\": 1000, \"max\": 9000 }, { \"min\": 9000, \"max\": 140000 } ] } Example Output \uf0c1 { \"results\": [ { \"min\": 0.0, \"max\": 1000.0, \"count\": 7981 }, { \"min\": 1000.0, \"max\": 9000.0, \"count\": 12720 }, { \"min\": 9000.0, \"max\": 140000.0, \"count\": 10350 } ], \"status\": \"SUCCESS\" }","title":"Tables Endpoints"},{"location":"tables/#tables-endpoints","text":"Method URL Description PUT /api/v1/tables/edit_row_attributes Edit Row Attributes PUT /api/v1/tables/edit_row_geometry Edit Row Geometry POST /api/v1/tables/add_column Add Column DELETE /api/v1/tables/delete_column Delete Column POST /api/v1/tables/add_row Add Row DELETE /api/v1/tables/delete_row Delete Row DELETE /api/v1/tables/delete_table Delete Table POST /api/v1/tables/create_table Create Table POST /api/v1/tables/statistics Statistics POST /api/v1/tables/bins Bins POST /api/v1/tables/numeric_breaks Numeric Breaks POST /api/v1/tables/custom_break_values Custom Break Values","title":"Tables Endpoints"},{"location":"tables/#endpoint-descriptions","text":"","title":"Endpoint Description's"},{"location":"tables/#edit-row-attributes","text":"","title":"Edit Row Attributes"},{"location":"tables/#description","text":"Edit Row Attributes endpoint allows you to edit one/all atrributes for a row at a time. In the example below we are changing the objectid and last_name columns for the row with a gid of 1 . Example:","title":"Description"},{"location":"tables/#example-input","text":"{ \"database\": \"data\", \"table\": \"mclean_county_parcels\", \"gid\": 1, \"values\": { \"objectid\": \"1\", \"last_name\": \"sample\" } }","title":"Example Input"},{"location":"tables/#example-output","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#edit-row-geometry","text":"","title":"Edit Row Geometry"},{"location":"tables/#description_1","text":"Edit Row Geometry endpoint allows you to change the geometry for each feature in a table by passing in geojson geometry in SRID 4326. In the example below, we are updating the table called zip_centroids with the gid of 1 for a new lat lng of [-88.23456,40.12345] . Example:","title":"Description"},{"location":"tables/#example-input_1","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"gid\": 1, \"geojson\": { \"type\": \"Point\", \"coordinates\": [ -88.23456, 40.12345 ] } }","title":"Example Input"},{"location":"tables/#example-output_1","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#add-column","text":"","title":"Add Column"},{"location":"tables/#description_2","text":"The add column endpoints allows you to add a new column to an existing table in the database. Example: In the example below, we are adding a column called test that is text for the table zip_centroids .","title":"Description"},{"location":"tables/#example-input_2","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"column_name\": \"test\", \"column_type\": \"text\" }","title":"Example Input"},{"location":"tables/#example-output_2","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#delete-column","text":"","title":"Delete Column"},{"location":"tables/#description_3","text":"The delete column endpoint allows you to delete a column in an existing table in the database. Example: In the example below, we are deleting a column called test from the table zip_centroids .","title":"Description"},{"location":"tables/#example-input_3","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"column_name\": \"test\" }","title":"Example Input"},{"location":"tables/#example-output_3","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#add-row","text":"","title":"Add Row"},{"location":"tables/#description_4","text":"The add row endpoint allows you to add a new to an existing table within the database. You can pass in one or all columns for this endpoint. If you do not pass in a column the value will be null. Example: In the example below, we are adding a a new row to the zip_centroids table and only adding the postalcode column with the geometry.","title":"Description"},{"location":"tables/#example-input_4","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"columns\": [ { \"column_name\": \"postalcode\", \"value\": \"55555\" } ], \"geojson\": { \"type\": \"Point\", \"coordinates\": [ -88.23456, 40.12345 ] } }","title":"Example Input"},{"location":"tables/#example-output_4","text":"{ \"status\": true, \"gid\": 7821 }","title":"Example Output"},{"location":"tables/#delete-row","text":"","title":"Delete Row"},{"location":"tables/#description_5","text":"The delete row endpoint allows you to delete a row for a table that exists in the database. Example: In the example below, we are deleting the column with a gid of 1 in the table zip_centroids .","title":"Description"},{"location":"tables/#example-input_5","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"gid\": 1 }","title":"Example Input"},{"location":"tables/#example-output_5","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#create-table","text":"","title":"Create Table"},{"location":"tables/#description_6","text":"The create table endpoints allow you to create a new table inside of a database. Example: In the example below, we are creating a new table called zip_centroids_new . We are adding one column in the table called postalcode , and setting the table to have POINT geometry.","title":"Description"},{"location":"tables/#example-input_6","text":"{ \"database\": \"data\", \"table\": \"zip_centroids_new\", \"columns\": [ { \"column_name\": \"postalcode\", \"column_type\": \"text\" } ], \"geometry_type\": \"POINT\" }","title":"Example Input"},{"location":"tables/#example-output_6","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#delete-table","text":"","title":"Delete Table"},{"location":"tables/#description_7","text":"The delete table endpoint allows you to delete a table within the database. Example: In the example below, we are deleting a table called zip_centroids .","title":"Description"},{"location":"tables/#example-input_7","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\" }","title":"Example Input"},{"location":"tables/#example-output_7","text":"{ \"status\": true }","title":"Example Output"},{"location":"tables/#statistics","text":"","title":"Statistics"},{"location":"tables/#description_8","text":"The statistics endpoints allows you to perform a multitude of common math statistics on your table such as 'distinct', 'avg', 'count', 'sum', 'max', 'min' .","title":"Description"},{"location":"tables/#parameters","text":"coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: In the example below we will be searching for the number of parcels, average deed ac, and distinct first names filtered by last name of DOOLEY .","title":"Parameters"},{"location":"tables/#example-input_8","text":"{ \"database\": \"data\", \"table\": \"mclean_county_parcels\", \"aggregate_columns\": [ { \"type\": \"count\", \"column\": \"gid\" }, { \"type\": \"avg\", \"column\": \"deed_ac\" }, { \"type\": \"distinct\", \"column\": \"first_name\", \"group_column\": \"first_name\", \"group_method\": \"count\" } ], \"filter\": \"last_name LIKE '%DOOLEY%'\" }","title":"Example Input"},{"location":"tables/#example-output_8","text":"{ \"results\": { \"count_gid\": 19, \"avg_deed_ac\": 64.28666666666666, \"distinct_first_name_count_first_name\": [ { \"first_name\": \"\", \"count\": 3 }, { \"first_name\": \"COLE\", \"count\": 3 }, { \"first_name\": \"% BAS\", \"count\": 2 }, { \"first_name\": \"%FIRST MID AG SERVICES \", \"count\": 2 }, { \"first_name\": \"COLE & WENDY\", \"count\": 1 }, { \"first_name\": \"EDITH\", \"count\": 1 }, { \"first_name\": \"JAMES R & TERESA\", \"count\": 1 }, { \"first_name\": \"KENNETH\", \"count\": 1 }, { \"first_name\": \"KEVIN\", \"count\": 1 }, { \"first_name\": \"LUCAS\", \"count\": 1 }, { \"first_name\": \"MCCALLA O & DEANA J\", \"count\": 1 }, { \"first_name\": \"THOMAS\", \"count\": 1 }, { \"first_name\": \"WENDY\", \"count\": 1 } ] }, \"status\": \"SUCCESS\" }","title":"Example Output"},{"location":"tables/#bins","text":"","title":"Bins"},{"location":"tables/#description_9","text":"The bins endpoints allows you to help visualize the spread of a data for a numerical column.","title":"Description"},{"location":"tables/#parameters_1","text":"coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: Calculate 10 bins for the deed_ac column on the mclean_county_parcels table.","title":"Parameters"},{"location":"tables/#example-input_9","text":"{ \"database\": \"data\", \"table\": \"mclean_county_parcels\", \"column\": \"deed_ac\", \"bins\": 10 }","title":"Example Input"},{"location":"tables/#example-output_9","text":"{ \"results\": [ { \"min\": 0.0, \"max\": 145.158, \"count\": 15993 }, { \"min\": 145.158, \"max\": 290.316, \"count\": 1088 }, { \"min\": 290.316, \"max\": 435.47399999999993, \"count\": 116 }, { \"min\": 435.47399999999993, \"max\": 580.632, \"count\": 19 }, { \"min\": 580.632, \"max\": 725.79, \"count\": 11 }, { \"min\": 725.79, \"max\": 870.9479999999999, \"count\": 1 }, { \"min\": 870.9479999999999, \"max\": 1016.1059999999999, \"count\": 0 }, { \"min\": 1016.1059999999999, \"max\": 1161.264, \"count\": 0 }, { \"min\": 1161.264, \"max\": 1306.4219999999998, \"count\": 0 }, { \"min\": 1306.4219999999998, \"max\": 1451.58, \"count\": 1 } ], \"status\": \"SUCCESS\" }","title":"Example Output"},{"location":"tables/#numeric-breaks","text":"","title":"Numeric Breaks"},{"location":"tables/#description_10","text":"Create bins of data based off of different mathmatical break types. Break Types: equal_interval, head_tail, quantile, jenk .","title":"Description"},{"location":"tables/#parameters_2","text":"coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: Create 3 breaks based off of the column population for the table zip_centroids using a quantile break type.","title":"Parameters"},{"location":"tables/#example-input_10","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"column\": \"population\", \"number_of_breaks\": 3, \"break_type\": \"quantile\" }","title":"Example Input"},{"location":"tables/#example-output_10","text":"{ \"results\": [ { \"min\": 0, \"max\": 1470, \"count\": 10301 }, { \"min\": 1470, \"max\": 8932, \"count\": 10373 }, { \"min\": 8932, \"max\": 133324, \"count\": 10377 } ], \"status\": \"SUCCESS\" }","title":"Example Output"},{"location":"tables/#custom-break-values","text":"","title":"Custom Break Values"},{"location":"tables/#description_11","text":"Create bins based off of your own min and max ranges and provide a count back for each bin.","title":"Description"},{"location":"tables/#parameters_3","text":"coordinates=coords - a list of coordinates used to filter the response geometry_type=geom_type - The type of geometry from the coordinates parameters. Options: 'POINT', 'LINESTRING', 'POLYGON' spatial_relationship=relationship - The type of spatial query to perform with the coordinates parameters. Options: 'ST_Intersects', 'ST_Crosses', 'ST_Within', 'ST_Contains', 'ST_Overlaps', 'ST_Disjoint', 'ST_Touches' filter=cql-expr - filters features via a CQL expression. Example: Create 3 custom bins 0 - 1,000 , 1,000 - 9,000 , and 9,000 - 140,000 based off of the column population for the table zip_centroids using a quantile break type.","title":"Parameters"},{"location":"tables/#example-input_11","text":"{ \"database\": \"data\", \"table\": \"zip_centroids\", \"column\": \"population\", \"breaks\": [ { \"min\": 0, \"max\": 1000 }, { \"min\": 1000, \"max\": 9000 }, { \"min\": 9000, \"max\": 140000 } ] }","title":"Example Input"},{"location":"tables/#example-output_11","text":"{ \"results\": [ { \"min\": 0.0, \"max\": 1000.0, \"count\": 7981 }, { \"min\": 1000.0, \"max\": 9000.0, \"count\": 12720 }, { \"min\": 9000.0, \"max\": 140000.0, \"count\": 10350 } ], \"status\": \"SUCCESS\" }","title":"Example Output"},{"location":"tiles/","text":"Tiles Endpoints \uf0c1 Method URL Description GET /api/v1/table/tables.json Tables GET /api/v1/table/{database}/{scheme}/{table}.json Table JSON GET /api/v1/tiles/{database}/{scheme}/{table}/{z}/{x}/{y}.pbf Tiles GET /api/v1/tiles/{database}/{scheme}/{table}.json Table TileJSON DELETE /api/v1/tiles/cache Delete Cache GET /api/v1/tiles/cache_size Cache Size Tables \uf0c1 Tables endpoint provides a listing of all the tables available to query as vector tiles. Tables endpoint is available at /api/v1/table/tables.json curl http://localhost:8000/api/v1/table/tables.json Example Response [ { \"name\": \"states\", \"schema\": \"public\", \"type\": \"table\", \"id\": \"public.states\", \"database\": \"data\", \"detailurl\": \"http://127.0.0.1:8000/api/v1/table/data/public/states.json\", \"viewerurl\": \"http://127.0.0.1:8000/viewer/data/public/states\" }, {},... Table JSON \uf0c1 Table endpoint is available at /api/v1/table/{database}/{scheme}/{table}.json For example, states table in public schema in data database will be available at /api/v1/table/data/public/states.json curl http://localhost:8000/api/v1/table/data/public/states.json Example Response { \"id\": \"public.states\", \"schema\": \"public\", \"tileurl\": \"http://127.0.0.1:8000/api/v1/tiles/data/public/states/{z}/{x}/{y}.pbf\", \"viewerurl\": \"http://127.0.0.1:8000/viewer/data/public/states\", \"properties\": [ { \"name\": \"gid\", \"type\": \"integer\", \"description\": null }, { \"name\": \"geom\", \"type\": \"geometry\", \"description\": null }, { \"name\": \"state_name\", \"type\": \"character varying\", \"description\": null }, { \"name\": \"state_fips\", \"type\": \"character varying\", \"description\": null }, { \"name\": \"state_abbr\", \"type\": \"character varying\", \"description\": null }, { \"name\": \"population\", \"type\": \"integer\", \"description\": null } ], \"geometrytype\": \"ST_MultiPolygon\", \"type\": \"table\", \"minzoom\": 0, \"maxzoom\": 22, \"bounds\": [ -178.2175984, 18.9217863, -66.9692709999999, 71.406235408712 ], \"center\": [ -112.96125695842262, 45.69082939790446 ] } Tiles \uf0c1 Tiles endpoint is available at /api/v1/tiles/{database}/{scheme}/{table}/{z}/{x}/{y}.pbf For example, states table in public schema in data database will be available at /api/v1/table/data/public/states/{z}/{x}/{y}.pbf Fields \uf0c1 If you have a table with a large amount of fields you can limit the amount of fields returned using the fields parameter. Note \uf0c1 If you use the fields parameter the tile will not be cached on the server. For example, if we only want the state_fips field. /api/v1/table/data/public/states/{z}/{x}/{y}.pbf?fields=state_fips CQL Filtering \uf0c1 CQL filtering is enabled via pygeofilter . This allows you to dynamically filter your tiles database size for larger tiles. For example, filter the states layer to only show states with a population greater than 1,000,000. /api/v1/table/data/public/states/{z}/{x}/{y}.pbf?cql_filter=population>1000000 Geoserver has examples of using cql filters. Spatial Filters \uf0c1 Filters Intersects Equals Disjoint Touches Within Overlaps Crosses Contains Note \uf0c1 If you use the cql_filter parameter the tile will not be cached on the server. Table Tile JSON \uf0c1 Table TileJSON endpoint is available at /api/v1/tiles/{database}/{scheme}/{table}.json For example, states table in public schema in data database will be available at /api/v1/tiles/data/public/states.json curl http://localhost:8000/api/v1/tiles/data/public/states.json Example Response { \"tilejson\": \"2.2.0\", \"name\": \"public.states\", \"version\": \"1.0.0\", \"scheme\": \"xyz\", \"tiles\": [ \"http://127.0.0.1:8000/api/v1/tiles/data/public/states/{z}/{x}/{y}.pbf\" ], \"viewerurl\": \"http://127.0.0.1:8000/viewer/data/public/states\", \"minzoom\": 0, \"maxzoom\": 22 } Cache Delete \uf0c1 The cache delete endpoint allows you to delete any vector tile cache on the server. This is a DELETE HTTP method endpoint. In your request you have to pass the following. { \"database\": \"data\", \"scheme\": \"public\", \"table\": \"states\" } Cache Size \uf0c1 Cache Size endpoint allows you to determine the size of a vector tile cache for each table. curl http://localhost:8000/api/v1/api/v1/tiles/cache_size Example Response [ { \"table\": \"data_public_counties\", \"size_in_gigabytes\": 0.004711238 }, { \"table\": \"data_public_states\", \"size_in_gigabytes\": 0.000034666 } ]","title":"Tiles Endpoints"},{"location":"tiles/#tiles-endpoints","text":"Method URL Description GET /api/v1/table/tables.json Tables GET /api/v1/table/{database}/{scheme}/{table}.json Table JSON GET /api/v1/tiles/{database}/{scheme}/{table}/{z}/{x}/{y}.pbf Tiles GET /api/v1/tiles/{database}/{scheme}/{table}.json Table TileJSON DELETE /api/v1/tiles/cache Delete Cache GET /api/v1/tiles/cache_size Cache Size","title":"Tiles Endpoints"},{"location":"tiles/#tables","text":"Tables endpoint provides a listing of all the tables available to query as vector tiles. Tables endpoint is available at /api/v1/table/tables.json curl http://localhost:8000/api/v1/table/tables.json Example Response [ { \"name\": \"states\", \"schema\": \"public\", \"type\": \"table\", \"id\": \"public.states\", \"database\": \"data\", \"detailurl\": \"http://127.0.0.1:8000/api/v1/table/data/public/states.json\", \"viewerurl\": \"http://127.0.0.1:8000/viewer/data/public/states\" }, {},...","title":"Tables"},{"location":"tiles/#table-json","text":"Table endpoint is available at /api/v1/table/{database}/{scheme}/{table}.json For example, states table in public schema in data database will be available at /api/v1/table/data/public/states.json curl http://localhost:8000/api/v1/table/data/public/states.json Example Response { \"id\": \"public.states\", \"schema\": \"public\", \"tileurl\": \"http://127.0.0.1:8000/api/v1/tiles/data/public/states/{z}/{x}/{y}.pbf\", \"viewerurl\": \"http://127.0.0.1:8000/viewer/data/public/states\", \"properties\": [ { \"name\": \"gid\", \"type\": \"integer\", \"description\": null }, { \"name\": \"geom\", \"type\": \"geometry\", \"description\": null }, { \"name\": \"state_name\", \"type\": \"character varying\", \"description\": null }, { \"name\": \"state_fips\", \"type\": \"character varying\", \"description\": null }, { \"name\": \"state_abbr\", \"type\": \"character varying\", \"description\": null }, { \"name\": \"population\", \"type\": \"integer\", \"description\": null } ], \"geometrytype\": \"ST_MultiPolygon\", \"type\": \"table\", \"minzoom\": 0, \"maxzoom\": 22, \"bounds\": [ -178.2175984, 18.9217863, -66.9692709999999, 71.406235408712 ], \"center\": [ -112.96125695842262, 45.69082939790446 ] }","title":"Table JSON"},{"location":"tiles/#tiles","text":"Tiles endpoint is available at /api/v1/tiles/{database}/{scheme}/{table}/{z}/{x}/{y}.pbf For example, states table in public schema in data database will be available at /api/v1/table/data/public/states/{z}/{x}/{y}.pbf","title":"Tiles"},{"location":"tiles/#fields","text":"If you have a table with a large amount of fields you can limit the amount of fields returned using the fields parameter.","title":"Fields"},{"location":"tiles/#note","text":"If you use the fields parameter the tile will not be cached on the server. For example, if we only want the state_fips field. /api/v1/table/data/public/states/{z}/{x}/{y}.pbf?fields=state_fips","title":"Note"},{"location":"tiles/#cql-filtering","text":"CQL filtering is enabled via pygeofilter . This allows you to dynamically filter your tiles database size for larger tiles. For example, filter the states layer to only show states with a population greater than 1,000,000. /api/v1/table/data/public/states/{z}/{x}/{y}.pbf?cql_filter=population>1000000 Geoserver has examples of using cql filters.","title":"CQL Filtering"},{"location":"tiles/#spatial-filters","text":"Filters Intersects Equals Disjoint Touches Within Overlaps Crosses Contains","title":"Spatial Filters"},{"location":"tiles/#note_1","text":"If you use the cql_filter parameter the tile will not be cached on the server.","title":"Note"},{"location":"tiles/#table-tile-json","text":"Table TileJSON endpoint is available at /api/v1/tiles/{database}/{scheme}/{table}.json For example, states table in public schema in data database will be available at /api/v1/tiles/data/public/states.json curl http://localhost:8000/api/v1/tiles/data/public/states.json Example Response { \"tilejson\": \"2.2.0\", \"name\": \"public.states\", \"version\": \"1.0.0\", \"scheme\": \"xyz\", \"tiles\": [ \"http://127.0.0.1:8000/api/v1/tiles/data/public/states/{z}/{x}/{y}.pbf\" ], \"viewerurl\": \"http://127.0.0.1:8000/viewer/data/public/states\", \"minzoom\": 0, \"maxzoom\": 22 }","title":"Table Tile JSON"},{"location":"tiles/#cache-delete","text":"The cache delete endpoint allows you to delete any vector tile cache on the server. This is a DELETE HTTP method endpoint. In your request you have to pass the following. { \"database\": \"data\", \"scheme\": \"public\", \"table\": \"states\" }","title":"Cache Delete"},{"location":"tiles/#cache-size","text":"Cache Size endpoint allows you to determine the size of a vector tile cache for each table. curl http://localhost:8000/api/v1/api/v1/tiles/cache_size Example Response [ { \"table\": \"data_public_counties\", \"size_in_gigabytes\": 0.004711238 }, { \"table\": \"data_public_states\", \"size_in_gigabytes\": 0.000034666 } ]","title":"Cache Size"}]}